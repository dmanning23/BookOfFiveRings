 
    processor 6502
    include "vcs.h"
    include "macro.h"
    include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

    seg.u Variables
    org $80

counter byte
fujiCounter byte
blossomCounter byte
characterCounter byte

XPos0 byte ;X position of player 0 sprite
XPos1 byte ;X position of player 1 sprite

controllerMask byte ;This variable is used to mask the controller input to map to p1 or p2

player1CharacterPointer word
player2CharacterPointer word

player1ColorPointer word
player2ColorPointer word

;Whether or not the game is over
;0 game is not over
;1 game is over
gameOver byte

;Timer used to countdown the game over state
gameOverTimer byte

;State variables
p1State byte
p2State byte

;The character timer, used to time various state actions
p1Timer byte
p2Timer byte

;The player's input from the previous frame
p1PrevInput byte
p2PrevInput byte

;The player's input from the current frame
p1Input byte
p2Input byte

;The timers used to time how long to play sounds
p1SoundTimer byte
p2SoundTimer byte

;These variables are used to start playing sounds
p1SoundVolume byte
p1SoundControl byte 
p1SoundFrequency byte
p2SoundVolume byte
p2SoundControl byte 
p2SoundFrequency byte

;The input flags are as follows:
controllerDown		equ #%00000001
controllerUp		equ #%00000010
controllerLeft		equ #%00000100
controllerRight		equ #%00001000
controllerButton	equ #%00010000

;The states are:
StandingState       equ #00
WalkingState        equ #01
BeginAttackState    equ #03
AttackingState      equ #04
BlockingState       equ #05
KnockbackState      equ #06
DeadState           equ #07

;These are the timers for the various states
BeginAttackTime	equ #12 
AttackTime      equ #30
BlockTime       equ #40
KnockbackTime   equ #40

BloodTime equ #%00010000
WalkTime equ #%00001000

;the borders of the screen
LeftSide equ #16
RightSide equ #128

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

    seg Code
    org $f000

Start
    CLEAN_START ;Macro to initialize several flags and registers, safely clears memory and TIA
    
    ;start a new game
    jsr Reset
    
    ;start displaying the game
    jmp NextFrame

Reset

    ;Make the players double-wide
    lda #07
    sta NUSIZ0
    sta NUSIZ1

    lda #$08 ;Flip player2 by setting the third bit of REFP1
    sta REFP1

    ;Make the players double-wide
    lda #07
    sta NUSIZ0
    sta NUSIZ1

    jsr ResetPlayerColors

    ; set up initial positions
    lda #35 ;p1 position
    sta XPos0
    lda #108 ;p2 position
    sta XPos1

    ;set the input up
    lda #0
    sta gameOver
    sta p1State
    sta p2State
    sta p1Timer
    sta p2Timer
    sta p1PrevInput
    sta p2PrevInput
    sta p1Input
    sta p2Input
    sta p1SoundTimer
    sta p2SoundTimer
    sta p1SoundVolume
    sta p1SoundControl 
    sta p1SoundFrequency 
    sta p2SoundVolume 
    sta p2SoundControl 
    sta p2SoundFrequency 
    rts

NextFrame

    lda #2 ;same as binary #%00000010
    sta VBLANK ;turn on VBLANK
    sta VSYNC ;turn on VSYNC

    ; 1 + 3 lines of VSYNC
    sta WSYNC ;first scanline
    sta WSYNC ;second scanline
    sta WSYNC ;third scanline
    lda #0
    sta VSYNC ;turn off vsync

    ; 37 lines of underscan
    TIMER_SETUP 37

    ;Update the players' input from joysticks
    lda #%11110000 ;this mask is used by the MoveJoystick routine to check p1 joystick
    sta controllerMask
    ldy #0
    jsr CheckInput ;update the input
    jsr CharacterUpdate ;update the players state
    
    ;Set teh animation of player1
    ldx #0
    jsr SetPlayerAnimation

    lda #%00001111 ;check p2 joystick
    sta controllerMask
    ldy #1
    jsr CheckInput
    jsr CharacterUpdate
    
    ;Set teh animation of player2
    ldx #2
    jsr SetPlayerAnimation

    ;the next two scanlines
    ;position the player horizontally
    lda XPos0 ;get X coordinate
    ldx #0 ;player 0
    jsr SetHorizPos ;set coarse offset

    lda XPos1
    ldx #1
    jsr SetHorizPos

    sta WSYNC ;sync w/ scanline
    sta HMOVE ;apply fine offsets

    lda #0
    sta COLUBK ;reset the background color to black to start our new frame
    sta COLUPF ;reset teh foreground color to black to start the new frame
    sta PF0 ;set the pf0 playfield register
    sta PF1 ;set the pf1 playfield register
    sta PF2 ;set the pf2 playfield register
    sta counter
    sta fujiCounter
    sta blossomCounter

    ; it's ok if we took an extra scanline because
    ; the PIA timer will always count 37 lines
    ; wait for end of underscan
    TIMER_WAIT

    ; disable VBLANK and release the TIA to generaqte some color
    sta VBLANK

;Draw the 192 scanlines
LVScan

;Draw 22 lines of blank sky
    lda #$70 ;Set the background to the sky color
    sta COLUBK
    ldx #22
DrawSky

    ;Draw the empty sky
    sta WSYNC
    dex
    bne DrawSky
    
;draw 30 lines of snow
    stx counter
    ldx #30
DrawSnow 
   
    sta WSYNC
    
    ;Use a counter to draw each pixel of Mount Fuji 4 lines high
    lda counter
    cmp #0
    bne DecrementSnowCounter
    
    lda #1 ;set background to mirrored for the mountain
    sta CTRLPF
    
    ;Draw the snowtop
    lda #$8E ;Set the foreground to the snow color
    sta COLUPF
    
    ldy fujiCounter
    lda MountFujiPFData0,y
    sta PF0

    lda MountFujiPFData1,y
    sta PF1

    lda MountFujiPFData2,y
    sta PF2

    inc fujiCounter
    lda #4
    sta counter

DecrementSnowCounter
    dec counter
    dex
    bne DrawSnow ;we never need to draw anything else in front of mount fuji, so skip to next line

;draw 30 lines of the mountain
    stx counter
    ldx #22
DrawMountFuji 

    sta WSYNC

    ;Use a counter to draw each pixel of Mount Fuji 4 lines high
    lda counter
    cmp #0
    bne DecrementFujiCounter

    ;Draw the mountain itself
        
    lda #$88 ;Set the foreground to the mountain color
    sta COLUPF

    ldy fujiCounter
    lda MountFujiPFData0,y
    sta PF0

    lda MountFujiPFData1,y
    sta PF1

    lda MountFujiPFData2,y
    sta PF2

    inc fujiCounter
    lda #4
    sta counter

DecrementFujiCounter
    dec counter
    dex
    bne DrawMountFuji
    jmp skipBigJump

bigJump ;this stupid routine is a bridge across pages?
    bne LVScan
    jmp endof192Lines

skipBigJump

;draw 30 lines of cherry tree tops

    lda #0 ;set the background to normal for the cherry trees
    sta CTRLPF
    stx counter
    ldx #16
DrawCherryTreeTops

    sta WSYNC

    ;Use a counter to draw each pixel of the cherry trees 5 lines high
    lda counter
    cmp #0
    bne DecrementCherryTreeTopsCounter

    ;Draw the tops of the cherry blossom trees    

    lda #$88 ;Set the background to the mountain color
    sta COLUBK

    ldy blossomCounter
    lda CherryTreeBlossomsPFData0,y
    sta PF0

    lda CherryTreeBlossomsPFData1,y
    sta PF1

    lda CherryTreeBlossomsPFData2,y
    sta PF2

    lda #$5e ;Set the foreground to the cherry tree color
    sta COLUPF

    inc blossomCounter ;increment the blossom counter to draw the next line of the bitmap
    lda #5
    sta counter

DecrementCherryTreeTopsCounter
    dec counter
    dex
    bne DrawCherryTreeTops

    ;draw the character playfield!
    stx counter
    stx characterCounter

    ldx #10
DrawCherryTreeBottom1
    ;Draw the bottoms of the cherry trees
    sta WSYNC
    dex
    bne DrawCherryTreeBottom1

    ldx #4
DrawCherryTreeBottom2
    ;Draw the bottoms of the cherry trees
    jsr DrawPlayers
    dex
    bne DrawCherryTreeBottom2

    lda #$59 ;Set the background to the cherry blossom color
    sta COLUPF

    ldx #2
DrawBlossomsTop
    ;Draw the empty cherry blossoms on the ground
    sta WSYNC
    dex
    bne DrawBlossomsTop

    ldx #13 ;yikes, every pass of this routine draws 4 lines
DrawBlossomsMiddle
    jsr DrawPlayers
    dex
    bne DrawBlossomsMiddle

    ;clear the character registers when done drawing
    lda #0
    sta GRP0 ;store bitmap
    sta COLUP0 ;store color
    sta GRP1 ;store bitmap
    sta COLUP1 ;store color

    ldx #22
DrawBlossomsBottom
    ;Draw the empty cherry blossoms on the ground
    sta WSYNC
    dex
    bne DrawBlossomsBottom

    jmp bigJump ;do a double jump to get back to the start of the frame
    
DrawPlayers
    sta WSYNC

    ;Draw Player 1
    jsr DrawP1

    sta WSYNC

    ;Draw player 2 on the next line
    jsr DrawP2

    ;add 2 wsyncs so this matches up
    sta WSYNC

    inc characterCounter
    sta WSYNC
    rts

DrawP1
    ldy characterCounter ;local coord -> Y
    lda (player1CharacterPointer),y ;lookup bitmap byte
    sta GRP0 ;store bitmap

    ;lookup the color
    lda (player1ColorPointer),y
    ;lda ColorFrame0,y
    sta COLUP0 ;store color
    rts

DrawP2
    ldy characterCounter ;local coord -> Y
    lda (player2CharacterPointer),y ;lookup bitmap byte
    sta GRP1 ;store bitmap

    ;lookup color
    lda (player2ColorPointer),y
    sta COLUP1 ;store color
    rts

endof192Lines

; Reenable VBLANK for bottom (and top of next frame)
    lda #2
    sta VBLANK

; 30 lines of overscan
    TIMER_SETUP 30
    
    jsr UpdateGameLogic
    
    TIMER_WAIT

;total = 262 lines, go to next frame
    jmp NextFrame

; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos
    sta WSYNC ;start a new line
    sec ;set carry flag
DivideLoop
    sbc #15 ;subtract 15
    bcs DivideLoop ;branch until negative
    eor #7 ;calculate fine offset
    asl
    asl
    asl
    asl
    sta RESP0,x ;fix coarse position
    sta HMP0,x ;set fine offset
    rts ;return to caller

CheckInput
    ;copy current input to prev
    lda p1Input,y
    sta p1PrevInput,y

    ;blank out the current input
    lda #0
    sta p1Input,y

CheckDown
    ;check if the down direction is being held
    lda #%00100010	;down?
    and controllerMask
    bit SWCHA
    bne CheckUp

    ;set the down flag for the current input
    lda p1Input,y
    ora controllerDown
    sta p1Input,y

CheckUp
    ;check if the up direction is being held
    lda #%00010001	;Up?
    and controllerMask
    bit SWCHA
    bne CheckLeft

    ;set the up flag for teh current input
    lda p1Input,y
    ora controllerUp
    sta p1Input,y

CheckLeft
    ;check if the left direction is being held
    lda #%01000100	;left?
    and controllerMask
    bit SWCHA
    bne CheckRight

    ;set the "left" flag for teh current input
    lda p1Input,y
    ora controllerLeft
    sta p1Input,y

CheckRight
    ;check if the left direction is being held
    lda #%10001000	;right?
    and controllerMask
    bit SWCHA
    bne CheckButton

    ;set the "right" flag for teh current input
    lda p1Input,y
    ora controllerRight
    sta p1Input,y

CheckButton
    ;are we checking p1 or p2? There is a different register depending on which one.
    tya
    cmp #01
    beq CheckP2Button

CheckP1Button
    lda #%10000000 ;Check if the button is pressed on the first controller
    bit INPT4
    beq SetButtonFlag
    jmp DoneCheckingInput

CheckP2Button
    lda #%10000000 ;Check if the button is pressed on the second controller
    bit INPT5
    beq SetButtonFlag
    jmp DoneCheckingInput

SetButtonFlag
    ;set the "button" flag for teh current input
    lda p1Input,y
    ora controllerButton
    sta p1Input,y

DoneCheckingInput
    rts

MovePlayer
CheckMoveLeft
    ;load the player's position to the X register
    ldx XPos0,y

    ;load the player's input to the accumulator
    lda p1Input,y

    ;Check if the left direction is being held down
    bit controllerLeft
    beq CheckMoveRight

    ;Dont walk off the left side of teh screen
    cpx LeftSide
    bcc CheckMoveRight

    ;Move left
    dex

    ;Set the player state to walking
    jmp ChangePlayerToWalking

CheckMoveRight
    ;Check if the "right" direction is being held down
    bit controllerRight
    beq ChangePlayerToStanding

    ;Dont walk off the right side of teh screen
    cpx #128
    bcs ChangePlayerToStanding

    ;move right!
    inx 

ChangePlayerToWalking
    ;is the player standing?
    lda p1State,y
    cmp StandingState
    bne DoneMovingPlayer

    ;Set the player's state to walking
    lda WalkingState
    sta p1State,y

    ;restart the timer
    lda $FF
    sta p1Timer,y

    jmp DoneMovingPlayer

ChangePlayerToStanding
    lda StandingState
    sta p1State,y

DoneMovingPlayer
    ;set the player's new position
    stx XPos0,y
    rts

CharacterUpdate
    ;Decrement the timer on every character update
    ldx p1Timer,y
    dex
    stx p1Timer,y

    ;Update the sound for this player
    jsr UpdateSound

    ;check if the game is over
    lda gameOver
    cmp #01
    bne CheckStanding

    ;check if the player is dead
    lda p1State,y
    cmp DeadState
    bne JumpToDoneUpdatingPlayerState

    ;Toggle the color to the blood if required
    ;AND teh game over timer with 16, if it is 0, set the player to neutral color
    lda gameOverTimer
    bit BloodTime
    bne ToggleBloodyColor

    jsr ToggleBloodyColor1
    jmp DoneUpdatingPlayerState

ToggleBloodyColor
    ;which player?
    tya
    cmp #00
    beq ToggleP1Bloody

    ldx #02
    jsr SetBloodyColor
    jmp DoneUpdatingPlayerState

ToggleP1Bloody
    ldx #00
    jsr SetBloodyColor
    jmp DoneUpdatingPlayerState

ToggleBloodyColor1
    ;which player?
    tya
    cmp #00
    beq ToggleP1Bloody1

    ldx #02
    jsr SetBloodyColor1
    jmp DoneUpdatingPlayerState

ToggleP1Bloody1
    ldx #00
    jsr SetBloodyColor1
    jmp DoneUpdatingPlayerState

JumpToDoneUpdatingPlayerState
    jmp DoneUpdatingPlayerState

CheckStanding  
    ;Check if the player is standing
    lda p1State,y
    cmp StandingState
    beq CheckStandingWalkingInput

    ;Check if the player is walking
    cmp WalkingState
    bne CheckBeginAttacking

CheckStandingWalkingInput
    ;check for the button press
    lda p1Input,y ;is the button currently held?
    bit controllerButton
    beq DoneCheckingButtonPress

    ;The down direction is currently being held, but is it a new input?
    eor p1PrevInput,y
    bit controllerButton
    beq DoneCheckingButtonPress

    ;change the state to "begin attacking"
    lda BeginAttackState
    sta p1State,y

    ;restart the timer
    ;lda BeginAttackTime ;for some reason this is fubar for player 2
    lda #12 
    sta p1Timer,y

    ;Set the sound timer to play the begin swing sound
    lda #0
    sta p1SoundTimer,y

    jmp DoneUpdatingPlayerState

DoneCheckingButtonPress

    ;check for down press
    lda p1Input,y ;is the down direction currently held?
    bit controllerDown
    beq DoneCheckingDownPress

    ;The down direction is currently being held, but is it a new input?
    eor p1PrevInput,y
    bit controllerDown
    beq DoneCheckingDownPress

    ;change the state to blocking
    lda BlockingState
    sta p1State,y

    ;restart the timer
    lda BlockTime
    sta p1Timer,y

    ;play the block sound
    lda #0
    sta p1SoundTimer,y

    jmp DoneUpdatingPlayerState

DoneCheckingDownPress

    ;Move the player depending on the current input
    jsr MovePlayer

    jmp DoneUpdatingPlayerState

CheckBeginAttacking

    lda p1State,y
    cmp BeginAttackState
    bne CheckAttacking

    ;check if the "up" direction was pressed
    lda p1Input,y ;is the up direction currently held?
    bit controllerUp
    beq DoneCheckingUpPress

    ;The up direction is currently being held, but is it a new input?
    eor p1PrevInput,y
    bit controllerUp
    beq DoneCheckingUpPress

    ;The player cancelled, change the state to standing
    lda StandingState
    sta p1State,y

    jmp DoneUpdatingPlayerState

DoneCheckingUpPress

    ;check if the timer is done
    lda p1Timer,y
    cmp #00
    bne DoneUpdatingPlayerState

    ;Change state to attacking
    lda AttackingState
    sta p1State,y

    ;start the timer
    lda AttackTime
    sta p1Timer,y

    ;Reset the sound timer to play the big attack sound
    lda #0
    sta p1SoundTimer,y

    jmp DoneUpdatingPlayerState

CheckAttacking

    lda p1State,y
    cmp AttackingState
    bne CheckBlocking

    ;check if the timer is done
    lda p1Timer,y
    cmp #00
    bne DoneUpdatingPlayerState

    ;Change to the standing state
    lda StandingState
    sta p1State,y

    jmp DoneUpdatingPlayerState

CheckBlocking

    lda p1State,y
    cmp BlockingState
    bne CheckKnockback

    ;check if the timer is done
    lda p1Timer,y
    cmp #00
    bne DoneUpdatingPlayerState

    ;Change to the standing state
    lda StandingState
    sta p1State,y

    jmp DoneUpdatingPlayerState

CheckKnockback

    lda p1State,y
    cmp KnockbackState
    bne DoneUpdatingPlayerState

    ;Scoot the player backwards while they are in knockback state
    ldx XPos0,y ;load the player's position so we can check to not kncok them off screen
    tya
    cmp #00 ;check which player is being knocked back
    bne ScootBackPlayer2

    ;scoot back player 1
    cpx LeftSide
    bcc DoneScootingBack

    ;Move left
    dex
    stx XPos0,y
    jmp DoneScootingBack

ScootBackPlayer2

    ;scoot back player 2
    cpx #128
    bcs DoneScootingBack

    ;move right!
    inx 
    stx XPos0,y

DoneScootingBack
    ;check if the timer is done
    lda p1Timer,y
    cmp #00
    bne DoneUpdatingPlayerState

    ;Change to the standing state
    lda StandingState
    sta p1State,y

    jmp DoneUpdatingPlayerState

DoneUpdatingPlayerState
    rts

SetPlayerAnimation
CheckStandingAnimation
    lda p1State,y
    cmp StandingState
    bne CheckWalkingAnimation

    ;set the standing animation
    lda #<Frame0
    sta player1CharacterPointer,x
    inx
    lda #>Frame0
    sta player1CharacterPointer,x

    jmp DoneCheckingAnimation

CheckWalkingAnimation
    lda p1State,y
    cmp WalkingState
    bne CheckBeginAttackingAnimation

    lda p1Timer,y ;load the state timer into the A reg
    bit WalkTime ;AND with 4 frames to animate the player
    bne SetAnimationFrame0

    ;set to teh second walking frame
    lda #<Frame5
    sta player1CharacterPointer,x
    inx
    lda #>Frame5
    sta player1CharacterPointer,x
    jmp DoneCheckingAnimation

SetAnimationFrame0

    lda #<Frame6
    sta player1CharacterPointer,x
    inx
    lda #>Frame6
    sta player1CharacterPointer,x

    jmp DoneCheckingAnimation

CheckBeginAttackingAnimation
    lda p1State,y
    cmp BeginAttackState
    bne CheckAttackAnimation

    lda #<Frame1
    sta player1CharacterPointer,x
    inx
    lda #>Frame1
    sta player1CharacterPointer,x

    jmp DoneCheckingAnimation
CheckAttackAnimation
    lda p1State,y
    cmp AttackingState
    bne CheckBlockAnimation

    lda #<Frame2
    sta player1CharacterPointer,x
    inx
    lda #>Frame2
    sta player1CharacterPointer,x

    jmp DoneCheckingAnimation
CheckBlockAnimation
    lda p1State,y
    cmp BlockingState
    bne CheckKnockbackAnimation

    lda #<Frame3
    sta player1CharacterPointer,x
    inx
    lda #>Frame3
    sta player1CharacterPointer,x

    jmp DoneCheckingAnimation
CheckKnockbackAnimation
    lda p1State,y
    cmp KnockbackState
    bne DoneCheckingAnimation

    lda #<Frame4
    sta player1CharacterPointer,x
    inx
    lda #>Frame4
    sta player1CharacterPointer,x

DoneCheckingAnimation
    rts

ResetPlayerColors
    ;Set the player colors to their neutral color
    ldx #00
    lda #<ColorFrame0
    sta player1ColorPointer,x
    inx
    lda #>ColorFrame0
    sta player1ColorPointer,x

    inx
    lda #<ColorFramePlayer1
    sta player1ColorPointer,x
    inx
    lda #>ColorFramePlayer1
    sta player1ColorPointer,x
    rts

SetBloodyColor
    lda #<ColorBlood
    sta player1ColorPointer,x
    inx
    lda #>ColorBlood
    sta player1ColorPointer,x
    rts

SetBloodyColor1
    lda #<ColorBlood1
    sta player1ColorPointer,x
    inx
    lda #>ColorBlood1
    sta player1ColorPointer,x
    rts

UpdateGameLogic
    ;check if the game is over
    lda gameOver
    cmp #01
    beq GameOverState

    ;check how close the players are
    LDA XPos0     ; Load the value of XPos0 into the accumulator
    CMP XPos1     ; Compare XPos0 with XPos1
    BCC XPos1Greater ; If XPos0 is less than XPos1, branch to XPos1Greater

    jmp XPos0GreaterOrEqual
    
GameOverState
    ;The game is over!

    ;Decrement the game over timer
    ldx gameOverTimer
    dex
    stx gameOverTimer
    txa
    cmp #0
    bne JumpToDoneUpdating

    ;the game is over, we've wantched the loser flash red, restart the game
    jsr Reset

JumpToDoneUpdating
    jmp DoneUpdatingGameLogic

XPos0GreaterOrEqual:
    lda XPos0
    SBC XPos1     ; Subtract XPos1 from the accumulator
    CMP #17       ; Compare the result with 64
    BCC CloseEnough  ; If result is less than 64, branch to LessThan
    JMP DoneUpdatingGameLogic      ; Jump to Done if result is greater or equal to 64

XPos1Greater:
    LDA XPos1
    sbc XPos0
    cmp #17
    bcc CloseEnough
    jmp DoneUpdatingGameLogic

CloseEnough
    ;is p1 attacking
    lda p1State
    cmp AttackingState
    bne CheckPlayer2GameLogic

    ;is p2 blocking
    lda p2State
    cmp BlockingState
    bne CheckP2Attacking

    ;Player 1 has been bounced back
    ldy 0
    jmp BouncePlayer

CheckP2Attacking
    ;is p2 attacking or begin attacking
    cmp AttackingState
    bne CheckP2BeginAttacking

    ;Both players are attacking, bounce them both
    jmp SetDoubleBounce

CheckP2BeginAttacking
    cmp BeginAttackState
    bne KillP2

    ;Both players are attacking, bounce them both
    jmp SetDoubleBounce

KillP2
    ;p2 has been killed
    ldy 1
    jmp KillPlayer

CheckPlayer2GameLogic
    ;is p2 attacking
    lda p2State
    cmp AttackingState
    bne DoneUpdatingGameLogic

    ;is p1 blocking
    lda p1State
    cmp BlockingState
    bne CheckP1BeginAttacking

    ;Player 2 has been bounced back
    ldy 1
    jmp BouncePlayer

CheckP1BeginAttacking
    ;is p1 begin attacking
    cmp BeginAttackState
    bne KillP1

    ;Both players are attacking, bounce them both
    jmp SetDoubleBounce

KillP1
    ;p1 has been killed
    ldy 0
    jmp KillPlayer

KillPlayer
    ;set teh game to over
    lda #01
    sta gameOver 

    ;Restart the sound timer to play the death sound
    lda #0
    sta p1SoundTimer,y

    ;start the game over timer
    lda #$FF
    sta gameOverTimer

    ;set the player to dead
    lda DeadState
    sta p1State,y

    ;set the players timer
    lda #01
    sta p1Timer,y
    jmp DoneUpdatingGameLogic

BouncePlayer
    ;Set the player to being knocked back
    lda KnockbackState
    sta p1State,y

    ;Set the player's timer
    lda KnockbackTime
    sta p1Timer,y

    ;Restart the sound timer to play the bounce sound for the correct player
    lda #0
    sta p1SoundTimer,y

    jmp DoneUpdatingGameLogic

SetDoubleBounce
    ;The game is in a state where both players are getting bounced
    ldy 0
    jsr BouncePlayer

    ldy 1
    jsr BouncePlayer

DoneUpdatingGameLogic
    rts

UpdateSound
    ;Check which state the player is in
    lda p1State,y
    cmp StandingState
    beq UpdateStandingSound

    cmp WalkingState
    beq UpdateWalkingSound

    cmp BeginAttackState
    beq UpdateBeginAttackingSound

    cmp AttackingState
    beq UpdateAttackingSound

    cmp BlockingState
    beq JumpToUpdateBlockingSound

    cmp KnockbackState
    beq JumpToUpdateKnockbackSound

    jmp UpdateDeathSound

JumpToUpdateBlockingSound
    jmp UpdateBlockingSound

JumpToUpdateKnockbackSound
    jmp UpdateKnockbackSound

UpdateStandingSound
    ;the player is standing still, don't play any sound for them 
    lda #0
    sta p1SoundVolume,y
    jsr PlaySound
    rts

UpdateWalkingSound
    ;play the walking sound
    lda p1Timer,y ;load the state timer into the A reg
    bit WalkTime ;AND with 4 frames to animate the player
    bne PlayWalkSound0

    ;play walk sound 1
    lda #1
    sta p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #28
    sta p1SoundFrequency,y
    jsr PlaySound

    jmp DoneUpdatingWalkSound

PlayWalkSound0
    lda #1
    sta p1SoundVolume,y
    lda #14
    sta p1SoundControl,y
    lda #28
    sta p1SoundFrequency,y
    jsr PlaySound

DoneUpdatingWalkSound
    rts

UpdateBeginAttackingSound
    ;play the begin attack sound
    lda p1SoundTimer,y
    sec
    sbc #6
    bcc PlayUpdateBeginAttackingSound

    jmp QuietUpdateBeginAttackingSound

PlayUpdateBeginAttackingSound
    lda #4
    sta p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #10
    sta p1SoundFrequency,y

    jsr PlaySound
    jmp DoneUpdateBeginAttackingSound

QuietUpdateBeginAttackingSound
    lda #0
    sta p1SoundVolume,y

    jsr PlaySound
    jmp DoneUpdateBeginAttackingSound

DoneUpdateBeginAttackingSound
    jsr IncrementSoundTimer
    rts

UpdateAttackingSound
    ;don't play this sound if the game is over
    lda gameOver
    cmp #01
    beq QuietUpdateAttackingSound

    ;play the attack sound
    lda p1SoundTimer,y
    sec
    sbc #12
    bcc PlayUpdateAttackingSound

    jmp QuietUpdateAttackingSound 

PlayUpdateAttackingSound
    lda #5
    sta p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #27
    sta p1SoundFrequency,y

    jsr PlaySound
    jmp DoneUpdateAttackingSound

QuietUpdateAttackingSound
    lda #0
    sta p1SoundVolume,y

    jsr PlaySound
    jmp DoneUpdateAttackingSound

DoneUpdateAttackingSound
    jsr IncrementSoundTimer
    rts

UpdateBlockingSound
    ;play the blocking sound
    lda p1SoundTimer,y
    sec
    sbc #8
    bcc PlayUpdateBlockingSound

    jmp QuietUpdateBlockingSound

PlayUpdateBlockingSound
    lda #5
    sta p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #28
    sta p1SoundFrequency,y

    jsr PlaySound
    jmp DoneUpdateBlockingSound

QuietUpdateBlockingSound
    lda #0
    sta p1SoundVolume,y
    jsr PlaySound
    jmp DoneUpdateBlockingSound

DoneUpdateBlockingSound
    jsr IncrementSoundTimer
    rts

UpdateKnockbackSound
    ;TODO: this sound effect artifacts really bad if played at the same time.
    ;Check if both players are in knock back and don't play it for p2

    ;Check how much time has elapsed
    lda p1SoundTimer,y
    sec
    sbc #8
    bcc DoKnockbackKaSound

    lda p1SoundTimer,y
    sbc #16
    bcc StartKnockbackChingSound

    jmp LoopKnockbackChingSound

DoKnockbackKaSound
    ;15,12,4
    lda #12
    sta p1SoundVolume,y
    lda #12
    sta p1SoundControl,y
    lda #4
    sta p1SoundFrequency,y

    jsr PlaySound
    jmp DoneUpdatingKnockbackSound

StartKnockbackChingSound
    ;15,4,7
    lda #15
    sta p1SoundVolume,y
    lda #4
    sta p1SoundControl,y
    lda #7
    sta p1SoundFrequency,y

    jsr PlaySound
    jmp DoneUpdatingKnockbackSound

LoopKnockbackChingSound
    lda p1SoundVolume,y
    cmp #0
    bne DecrementKnockbackChingSound

    jsr PlaySound
    jmp DoneUpdatingKnockbackSound

DecrementKnockbackChingSound
    ldx p1SoundVolume,y
    dex
    stx p1SoundVolume,y

    jsr PlaySound
    jmp DoneUpdatingKnockbackSound

DoneUpdatingKnockbackSound
    ;increment the sound timer
    jsr IncrementSoundTimer
    rts

UpdateDeathSound
    ;Check how much time has elapsed
    lda p1SoundTimer,y
    cmp #0
    beq StartDeathScreamSound
    
    sec
    sbc #14
    bcc DoDeathScreamSound1
    
    lda p1SoundTimer,y
    sbc #32
    bcc DoDeathScreamSound
    beq StartDeathLoopSound
    
    jmp DoDeathLoopSound
    
StartDeathScreamSound

    lda #15
    sta p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #5
    sta p1SoundFrequency,y
    
    jsr PlaySound
    jmp DoneUpdatingDeathSound
    
DoDeathScreamSound1

    jsr PlaySound
    jmp DoneUpdatingDeathSound

DoDeathScreamSound

    ;Play the death sound
    ldx p1SoundVolume,y
    dex
    stx p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #5
    sta p1SoundFrequency,y
    
    jsr PlaySound
    jmp DoneUpdatingDeathSound

StartDeathLoopSound

    lda #12
    sta p1SoundVolume,y
    lda #8
    sta p1SoundControl,y
    lda #1
    sta p1SoundFrequency,y
    
    jsr PlaySound
    jmp DoneUpdatingDeathSound

DoDeathLoopSound
    ;do looping effect on death sound
    ;check if the sound frequency is 32
    lda p1SoundFrequency,y
    cmp #32
    beq RestartDeathLoopSound
    
    lda #8
    sta p1SoundControl,y
    
    ldx p1SoundFrequency,y
    inx
    stx p1SoundFrequency,y
    
    jsr PlaySound
    jmp DoneUpdatingDeathSound
    
RestartDeathLoopSound
    ;reset the frequency
    lda #0
    sta p1SoundFrequency,y

    ;decrement the volume
    ldx p1SoundVolume,y
    dex
    dex
    stx p1SoundVolume,y   

    jsr PlaySound
    jmp DoneUpdatingDeathSound

DoneUpdatingDeathSound
    ;increment the sound timer
    jsr IncrementSoundTimer
    rts

IncrementSoundTimer
    ldx p1SoundTimer,y
    inx
    stx p1SoundTimer,y
    rts

PlaySound
    ;si the sound p1 or p2
    tya
    cmp #00
    bne PlayP2Sound

    ;play the p1 sound
    lda p1SoundVolume,y
    sta AUDV0

    ;load the control up
    lda p1SoundControl,y
    sta AUDC0

    ;load the freq up
    lda p1SoundFrequency,y
    sta AUDF0

    ;done playing sounds!
    rts

PlayP2Sound
    ;play the p2 sound
    ;load the volume up
    lda p1SoundVolume,y
    sta AUDV1

    ;load the control up
    lda p1SoundControl,y
    sta AUDC1

    ;load the freq up
    lda p1SoundFrequency,y
    sta AUDF1

    ;done playing sounds!
    rts

;Mount Fuji data
;colors:
;snow: 9e
;sky: 70
;mountain: 98
;cherry tree blossoms: 5e
;cherry blossoms: 59

MountFujiPFData0
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%11000000
        .byte #%11110000
        .byte #%11110000
        .byte #%11110000

MountFujiPFData1
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000001
        .byte #%00000011
        .byte #%00000111
        .byte #%00001111
        .byte #%00011111
        .byte #%01111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111

MountFujiPFData2
        .byte #%11100000
        .byte #%11111000
        .byte #%11111100
        .byte #%11111110
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        .byte #%11111111
        
CherryTreeBlossomsPFData0
        .byte #%10000000
        .byte #%11000000
        .byte #%11100000
        .byte #%11111111

CherryTreeBlossomsPFData1
        .byte #%11000110
        .byte #%11101111
        .byte #%11111111
        .byte #%11111111

CherryTreeBlossomsPFData2
        .byte #%00100000
        .byte #%01110001
        .byte #%11111011
        .byte #%11111111

;---Graphics Data from PlayerPal 2600---

Frame0
        .byte #%01000000;$00
        .byte #%01100000;$00
        .byte #%01100000;$FA
        .byte #%01100000;$FA
        .byte #%01000100;$0C
        .byte #%11100100;$0C
        .byte #%11101100;$0C
        .byte #%11101000;$0C
        .byte #%11111000;$0C
        .byte #%01110000;$0C
        .byte #%01100000;$90
        .byte #%01100000;$0A
        .byte #%11110000;$0A
        .byte #%11011000;$0A
        .byte #%11011000;$0A
        .byte #%11001100;$F0
        .byte #%00000000;$F0
Frame1
        .byte #%01000000;$00
        .byte #%01100000;$00
        .byte #%01100000;$FA
        .byte #%01100000;$FA
        .byte #%01001000;$0C
        .byte #%01101000;$0C
        .byte #%11101000;$0C
        .byte #%11101000;$0C
        .byte #%01101000;$0C
        .byte #%01111000;$0C
        .byte #%01100000;$90
        .byte #%01100000;$0A
        .byte #%11110000;$0A
        .byte #%11011000;$0A
        .byte #%11011000;$0A
        .byte #%11001100;$F0
        .byte #%00000000;$F0
Frame2
        .byte #%00100000;$00
        .byte #%00110000;$00
        .byte #%00110000;$FA
        .byte #%00110000;$FA
        .byte #%00100000;$0C
        .byte #%01100001;$0C
        .byte #%01111110;$0C
        .byte #%01110000;$0C
        .byte #%01100000;$0C
        .byte #%01100000;$0C
        .byte #%01100000;$90
        .byte #%01100000;$0A
        .byte #%11110000;$0A
        .byte #%11011000;$0A
        .byte #%11011000;$0A
        .byte #%11001100;$F0
        .byte #%00000000;$F0
Frame3
        .byte #%10000000;$00
        .byte #%11000000;$00
        .byte #%11000000;$FA
        .byte #%11000000;$FA
        .byte #%10010000;$0C
        .byte #%11111000;$0C
        .byte #%11101000;$0C
        .byte #%11101100;$0C
        .byte #%11100100;$0C
        .byte #%11000100;$0C
        .byte #%11000000;$90
        .byte #%11100000;$0A
        .byte #%11110000;$0A
        .byte #%11011000;$0A
        .byte #%11011000;$0A
        .byte #%11001100;$F0
        .byte #%00000000;$F0
Frame4
        .byte #%00010000;$00
        .byte #%00011000;$00
        .byte #%00011000;$FA
        .byte #%00011000;$FA
        .byte #%10010000;$0C
        .byte #%10011000;$0C
        .byte #%10111000;$0C
        .byte #%11111000;$0C
        .byte #%01111000;$0C
        .byte #%00110000;$0C
        .byte #%00110000;$90
        .byte #%00111000;$0A
        .byte #%01111100;$0A
        .byte #%01101100;$0A
        .byte #%11101100;$0A
        .byte #%11001100;$F0
        .byte #%00000000;$F0
Frame5
        .byte #%01000000;$00
        .byte #%01100000;$00
        .byte #%01100000;$FA
        .byte #%01100000;$FA
        .byte #%01000100;$0C
        .byte #%11100100;$0C
        .byte #%11101100;$0C
        .byte #%11101000;$0C
        .byte #%11111000;$0C
        .byte #%01110000;$0C
        .byte #%01100000;$90
        .byte #%01100000;$0A
        .byte #%11111000;$0A
        .byte #%11011100;$0A
        .byte #%11001100;$0A
        .byte #%11000110;$F0
        .byte #%00000000;$F0
Frame6
        .byte #%01000000;$00
        .byte #%01100000;$00
        .byte #%01100000;$FA
        .byte #%01100000;$FA
        .byte #%01000100;$0C
        .byte #%11100100;$0C
        .byte #%11101100;$0C
        .byte #%11101000;$0C
        .byte #%11111000;$0C
        .byte #%01110000;$0C
        .byte #%01100000;$90
        .byte #%01100000;$0A
        .byte #%01110000;$0A
        .byte #%01011000;$0A
        .byte #%01011000;$0A
        .byte #%01101100;$F0
        .byte #%00000000;$F0
;---End Graphics Data---


;---Color Data from PlayerPal 2600---

ColorFrame0
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
ColorFrame1
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
ColorFrame2
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
ColorFrame3
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
ColorFrame4
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
ColorFrame5
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
ColorFrame6
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$0C;
        .byte #$90;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$0A;
        .byte #$F0;
        .byte #$F0;
;---End Color Data---



ColorFramePlayer1
        .byte #$00;
        .byte #$00;
        .byte #$FA;
        .byte #$FA;
        .byte #$0c;
        .byte #$0c;
        .byte #$0c;
        .byte #$0c;
        .byte #$0c;
        .byte #$0c;
        .byte #$C0;
        .byte #$0b;
        .byte #$0b;
        .byte #$0b;
        .byte #$0b;
        .byte #$F0;
        .byte #$F0;

ColorBlood
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;
        .byte #$40;

ColorBlood1
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;
        .byte #$1C;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

    org $fffc
    .word Start	; reset vector
    .word Start	; BRK vector
 